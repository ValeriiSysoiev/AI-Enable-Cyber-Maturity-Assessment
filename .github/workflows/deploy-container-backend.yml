name: Deploy Backend to Azure Container Apps

on:
  push:
    branches:
      - main
    paths:
      - 'src/backend/**'
      - '.github/workflows/deploy-container-backend.yml'
  workflow_dispatch:

env:
  AZURE_CONTAINER_APP_NAME: backend-aiagents-gov
  AZURE_RESOURCE_GROUP: rg-info-2259
  AZURE_LOCATION: westeurope
  DOCKERFILE_PATH: src/backend/Dockerfile.azure
  REGISTRY_LOGIN_SERVER: somcregistrysweden.azurecr.io
  IMAGE_NAME: backend-aiagents-gov

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_4B56FB896AFD48948EF365DD7978088C }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_69FF20C66F594B6EAD0F70801F9CBECF }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_B36ED8D8811C4986991751EC07FFFA4D }}

      - name: Build and push image to ACR
        run: |
          # Log in to ACR
          az acr login --name somcregistrysweden
          
          # Build and push the Docker image
          docker build -f ${{ env.DOCKERFILE_PATH }} -t ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -t ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest src/backend/
          docker push ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy to Azure Container Apps
        run: |
          # Check if Container App exists
          if az containerapp show --name ${{ env.AZURE_CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "Container App exists, updating..."
            az containerapp update \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          else
            echo "Container App does not exist, creating..."
            
            # Get or create Container App Environment
            ENVIRONMENT_NAME="cae-aiagents-gov"
            if ! az containerapp env show --name $ENVIRONMENT_NAME --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
              echo "Creating Container App Environment..."
              az containerapp env create \
                --name $ENVIRONMENT_NAME \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --location ${{ env.AZURE_LOCATION }}
            fi
            
            # Create Container App
            az containerapp create \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment $ENVIRONMENT_NAME \
              --image ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --target-port 8000 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 3 \
              --cpu 1.0 \
              --memory 2.0Gi \
              --registry-server ${{ env.REGISTRY_LOGIN_SERVER }} \
              --env-vars \
                PORT=8000 \
                AZURE_OPENAI_ENDPOINT="https://somc-ai-autogen.openai.azure.com/" \
                AZURE_AI_SUBSCRIPTION_ID="05cc117e-29ea-49f3-9428-c5d042340a91" \
                AZURE_AI_RESOURCE_GROUP="rg-info-2259" \
                AZURE_AI_PROJECT_NAME="SoMC-AI-AutoGen" \
                AZURE_AI_AGENT_ENDPOINT="https://somc-ai-autogen.openai.azure.com/" \
                ENVIRONMENT="production" \
                AZURE_OPENAI_DEPLOYMENT_NAME="gpt-4o" \
                AZURE_OPENAI_API_VERSION="2024-02-01"
          fi

      - name: Get Container App URL
        run: |
          FQDN=$(az containerapp show --name ${{ env.AZURE_CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)
          echo "üöÄ Container App deployed successfully!"
          echo "üìç URL: https://$FQDN"
          echo "üè• Health Check: https://$FQDN/health"
          echo "üìö API Docs: https://$FQDN/docs"
